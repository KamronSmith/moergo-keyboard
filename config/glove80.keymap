/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 0>, <&to 0>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        HML: HML {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <9 5 6 7 8 9 16 17 18 19 20 21 28 29 30 31 32 33 40 41 42 43 44 45 55 56 57 58 59 60 61 62 63 72 73 74 75 76 77 78 79>;
        };

        HMR: HMR {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <175>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 52 53 54 64 65 66 67 68 69 70 71 2 3 4>;
            hold-trigger-on-release;
        };

        EXCLM: EXCLM {
            compatible = "zmk,behavior-mod-morph";
            label = "EXCLM";
            bindings = <&kp EXCL>, <&kp QUESTION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        bspc: bspc {
            compatible = "zmk,behavior-hold-tap";
            label = "BSPC";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <175>;
            flavor = "balanced";
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&kp F5      &kp F4           &kp F3             &kp F2            &kp F1                                                                                                                                                  &kp F6             &kp F7             &kp F8         &kp F9            &kp F10
&none       &kp N1           &kp N2             &kp N3            &kp N4               &kp N5                                                                                                                 &kp N6      &kp N7             &kp N8             &kp N9         &kp N0            &kp LC(LA(DELETE))
&none       &kp V            &kp M              &kp L             &kp C                &kp P                                                                                                                  &kp B       &kp F              &kp O              &kp U          &kp Q             &none
&none       &HML LEFT_ALT S  &HML LEFT_SHIFT T  &HML LEFT_META R  &HML LEFT_CONTROL D  &kp Y                                                                                                                  &kp PERIOD  &HMR RCTRL N       &HMR RIGHT_META E  &HMR RSHIFT A  &HMR RALT I       &caps_word
&none       &kp Z            &kp K              &kp J             &bspc 2 G            &kp W   &kp LS(LA(LC(LG(A))))  &none           &rgb_ug_status_macro  &out OUT_TOG  &none        &kp LS(LA(LC(LG(B))))  &kp X       &bspc 2 H          &kp COMMA          &kp DOT        &kp SINGLE_QUOTE  &none
&magic 3 0  &none            &none              &kp STAR          &kp COLON                    &lt 1 SPACE            &sk LEFT_SHIFT  &none                 &none         &key_repeat  &kp BACKSPACE                      &kp DOUBLE_QUOTES  &kp SEMI           &none          &none             &none
            >;
        };

        EXTEND {
            bindings = <
&kp LEFT  &none     &none       &none         &none                                                                                    &none              &none      &none           &none            &none
&none     &none     &none       &none         &none            &none                                                         &none     &none              &none      &none           &none            &none
&none     &none     &kp K_MUTE  &kp C_VOL_DN  &kp C_VOLUME_UP  &none                                                         &kp HOME  &kp PG_DN          &kp PG_UP  &kp END         &kp PAUSE_BREAK  &none
&none     &kp LALT  &kp LSHFT   &kp LGUI      &kp LCTRL        &none                                                         &kp LEFT  &kp DOWN           &kp UP     &kp RIGHT       &kp BACKSPACE    &none
&none     &none     &none       &kp C_PREV    &kp C_NEXT       &none  &none  &none  &none  &none  &none    &kp C_PLAY_PAUSE  &none     &kp K_APPLICATION  &kp INS    &kp SCROLLLOCK  &kp PRINTSCREEN  &none
&none     &none     &none       &none         &none                   &none  &none  &none  &none  &kp TAB  &kp ENTER                   &none              &none      &none           &none            &none
            >;
        };

        Symbol {
            bindings = <
&none  &none           &none         &none       &none                                                                                                               &none                 &none                  &none              &none             &none
&none  &none           &none         &none       &none             &none                                                                              &none          &none                 &none                  &none              &none             &none
&none  &kp AT_SIGN     &kp DOLLAR    &kp CARET   &kp EQUAL         &kp AMPERSAND                                                                      &kp PERCENT    &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp SQT            &none             &none
&none  &kp UNDERSCORE  &kp COLON     &kp SLASH   &kp MINUS         &kp PIPE                                                                           &kp SEMICOLON  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp DOUBLE_QUOTES  &kp TILDE         &none
&none  &kp HASH        &kp ASTERISK  &kp DOLLAR  &kp LEFT_BRACKET  &kp EXCLAMATION  &none      &none          &none  &none  &none          &none      &kp BACKSLASH  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp LESS_THAN      &kp GREATER_THAN  &none
&none  &none           &none         &none       &none                              &kp LCTRL  &kp LEFT_META  &none  &none  &kp LEFT_META  &kp LCTRL                 &none                 &none                  &none              &none             &none
            >;
        };

        magic_layer {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &to 0
            >;
        };
    };
};
